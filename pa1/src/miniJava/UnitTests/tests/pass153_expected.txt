================ Tokens ================
1:0 Class{class}
1:6 Identifier{Foo}
1:10 LCurly{{}
2:3 VoidType{void}
2:8 Identifier{bar}
2:11 LParen{(}
2:12 RParen{)}
2:14 LCurly{{}
3:6 IntType{int}
3:10 LBracket{[}
3:11 RBracket{]}
3:13 Identifier{arr}
3:17 AssignmentOp{=}
3:19 New{new}
3:23 IntType{int}
3:26 LBracket{[}
3:27 IntLiteral{20}
3:29 RBracket{]}
3:31 Add{+}
3:33 IntLiteral{1}
3:34 Semicolon{;}
4:6 Identifier{Foo}
4:10 LBracket{[}
4:11 RBracket{]}
4:13 Identifier{foo}
4:17 AssignmentOp{=}
4:19 IntLiteral{2}
4:21 Add{+}
4:23 New{new}
4:27 Identifier{Foo}
4:30 LBracket{[}
4:31 IntLiteral{30}
4:33 RBracket{]}
4:34 Semicolon{;}
5:3 RCurly{}}
6:0 RCurly{}}
9:0 End{EOF}
================ Debug ================
================ Errors ================
======= AST Display =========================
Package
  ClassDeclList [1]
  . ClassDecl
  .   "Foo" classname
  .   FieldDeclList [0]
  .   MethodDeclList [1]
  .   . (private) MethodDecl
  .   .   VOID BaseType
  .   .   "bar" methodname
  .   .   ParameterDeclList [0]
  .   .   StmtList [2]
  .   .   . VarDeclStmt
  .   .   .   VarDecl
  .   .   .     ArrayType
  .   .   .       INT BaseType
  .   .   .     "arr" varname
  .   .   .   BinaryExpr
  .   .   .     "+" Operator
  .   .   .       NewArrayExpr
  .   .   .         INT BaseType
  .   .   .         LiteralExpr
  .   .   .           "20" IntLiteral
  .   .   .       LiteralExpr
  .   .   .         "1" IntLiteral
  .   .   . VarDeclStmt
  .   .   .   VarDecl
  .   .   .     ArrayType
  .   .   .       ClassType
  .   .   .         "Foo" Identifier
  .   .   .     "foo" varname
  .   .   .   BinaryExpr
  .   .   .     "+" Operator
  .   .   .       LiteralExpr
  .   .   .         "2" IntLiteral
  .   .   .       NewArrayExpr
  .   .   .         ClassType
  .   .   .           "Foo" Identifier
  .   .   .         LiteralExpr
  .   .   .           "30" IntLiteral
=============================================
